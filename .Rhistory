stats <- mirt::M2(mod,type="C2")
}else{
stats <- "Statistics cannot be calculated due to too few degrees of freedom."
}
list(loadings=mod@Fit$F,
indices=stats,
scores=Zok)
}
input$method=="EM"
method=="EM"
method="EM"
fit <- gradedIRT_1(data, method = method, extraction = "EAP", n.input = 3)
runApp('~/GitHub/clc/R')
runApp('~/GitHub/clc/R')
fit <- gradedIRT_1(data, method = method, extraction = "EAP", n.input = 3)
Z <- mirt::fscores(fit, method="EAP", rotate="none", verbose=F)
mod <- mirt::mirt(data,
model=1,
itemtype="graded",
dentype="Gaussian",
TOL=tol,
method = "MCEM",
technical=list(NCYCLES=5000),
verbose=F, calcNull=T)
mod <- mirt::mirt(data,
model=1,
itemtype="graded",
dentype="Gaussian",
TOL=0.001,
method = "MCEM",
technical=list(NCYCLES=5000),
verbose=F, calcNull=T)
mod <- mirt::mirt(data,
model=1,
itemtype="graded",
dentype="Gaussian",
TOL=0.001,
method = "MCEM",
technical=list(NCYCLES=50),
verbose=F, calcNull=T)
Z <- mirt::fscores(mod, method="EAP", rotate="none", verbose=F)
Z
Zok <- Z[,1]*sd(unlist(data))+mean(unlist(data))
Zok
runApp('~/GitHub/clc/R')
runApp()
runApp('~/GitHub/clc/R')
runApp()
Zok <- Z[,1]*sd(unlist(data))+mean(unlist(data))
Zok
Z
Z[,1]
runApp('~/GitHub/clc/R')
runApp('~/GitHub/clc/R')
runApp()
runApp('~/GitHub/clc/R')
help(shinyjs::disable)
help(disable)
help("prettyRadioButtons")
runApp('~/GitHub/clc/R')
runApp('~/GitHub/clc/R')
library(rsconnect)
deployApp()
setwd("~/GitHub/clc/R")
deployApp()
shiny::runApp()
runApp()
help(fa)
help(psych::fa)
library(psych)
help(fa)
wls <- fa(Harman74.cor$cov,4,fm="wls")       #weighted least squares
wls
summary(wls)
runApp()
shiny::runApp('R')
shiny::runApp('R')
runApp()
runApp('R')
runApp('R')
help(fa)
setwd("~/GitHub/clc/Sample Dataset")
data <- read.csv(file="test_data_comma.csv")
library(psych)
fit <- fa(r = data, rotate = "varimax",
nfactors = 1,
fm = "ml",
scores = "Anderson")
fit <- fa(r = data, rotate = "varimax",
nfactors = 1,
fm = "ml",
scores = "regression")
fit$scores
fit$r.scores
fit$R2.scores
runApp('~/GitHub/clc/R')
runApp('~/GitHub/clc/R')
runApp('~/GitHub/clc/R')
runApp('~/GitHub/clc/R')
runApp('~/GitHub/clc/R')
runApp('~/GitHub/clc/R')
runApp('~/GitHub/clc/R')
help(fa)
runApp('~/GitHub/clc/R')
help(mirt)
help(fa)
runApp('~/GitHub/clc/R')
runApp('~/GitHub/clc/R')
data <- read.csv(file="test_data_semic_missing.csv", sep=";")
data
data <- data[, c(1,2,3)]
data
fit <- fa(r = data, rotate = "none",
nfactors = 1,
fm = "ml",
scores = "regression",
missing = TRUE,
impute = "median")
fit$scores
fit$scores*sd(unlist(data))+mean(unlist(data))
sd(unlist(data))
data
var.new <- fit$scores*sd(unlist(data), na.rm = TRUE)+mean(unlist(data), na.rm = TRUE)
var.new
runApp('~/GitHub/clc/R')
fit$loadings
runApp('~/GitHub/clc/R')
runApp('~/GitHub/clc/R')
help(mirt)
help(fscores)
runApp('~/GitHub/clc/R')
runApp('~/GitHub/clc/R')
runApp('~/GitHub/clc/R')
setwd("~/GitHub/clc/R")
library(rsconnect)
deployApp()
shiny::runApp('R')
setwd("~/GitHub/clc/R")
setwd("~/GitHub/clc/R")
setwd("~/GitHub/clc/Sample Dataset")
data <- read.csv(file="BackDepression.csv", header = TRUE)
data <- read.csv(file="BeckDepression.csv", header = TRUE)
data
data <- data[, c(3:7)]
library(psych)
fit <- fa(r = data, rotate = "none",
nfactors = 1,
fm = "ml",
scores = "regression",
missing = TRUE,
impute = "median")
runApp('~/GitHub/clc/R')
runApp('~/GitHub/clc/R')
runApp('~/GitHub/clc/R')
runApp('~/GitHub/clc/R')
runApp('~/GitHub/clc/R')
document()
devtools::document()
library(rsconnect)
deployApp()
setwd("~/GitHub/clc/R")
deployApp()
deployApp()
runApp()
deployApp()
runApp()
deployApp()
runApp()
help(fa)
devtools::document()
deployApp()
help(fscores)
runApp()
deployApp()
help(modalDialog)
shiny::runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp()
runApp('R')
runApp('R')
school <- c("daje", "daje")
school +2
school <- c("daje", NA)
school +2
runApp('R')
data <- read.csv(file="HolzingerSwineford1939_comma.csv")
setwd("~/GitHub/clc/Sample Dataset")
data <- read.csv(file="HolzingerSwineford1939_comma.csv")
data
data[,2]
sum(data[,2])
sum(data)
help(selectizeInput)
runApp('~/GitHub/clc/R')
as.matrix(data)
as.matrix(data)[, "school"]
as.matrix(data)[, "sex"]
sum(as.matrix(data)[, "sex"])
data
data[, "sex"]
as.matrix(data)[, "sex"]
runApp('~/GitHub/clc/R')
runApp('~/GitHub/clc/R')
data
colnames(data)
data2 <- data[, c(2,7,8,9)]
data2
fit <- psych::fa(r = data, rotate = "none",
nfactors = 1,
fm = "ml",
scores = "regression",
missing = FALSE)
runApp('~/GitHub/clc/R')
runApp('~/GitHub/clc/R')
runApp('~/GitHub/clc/R')
runApp('~/GitHub/clc/R')
runApp('~/GitHub/clc/R')
runApp('~/GitHub/clc/R')
runApp('~/GitHub/clc/R')
help("updateTabsetPanel")
runApp('~/GitHub/clc/R')
runApp('~/GitHub/clc/R')
library(rsconnect)
deployApp()
setwd("~/GitHub/clc/R")
deployApp()
shiny::runApp('R')
runApp('R')
runApp('R')
runApp('R')
shiny::runApp('R')
setwd("~/GitHub/clc/Sample Dataset")
data <- read.csv("test_data_comma.csv")
data
data <- read.csv("test_data_comma.csv")
data
mod <- mirt::mirt(data,
model=1,
itemtype="graded",
dentype="Gaussian",
TOL=tol,
method = "EM",
technical=list(NCYCLES=maxit),
verbose=F, calcNull=T)
mod <- mirt::mirt(data,
model=1,
itemtype="graded",
dentype="Gaussian",
TOL=0.001,
method = "EM",
technical=list(NCYCLES=maxit),
verbose=F, calcNull=T)
mod <- mirt::mirt(data,
model=1,
itemtype="graded",
dentype="Gaussian",
TOL=0.001,
method = "EM",
technical=list(NCYCLES=5000),
verbose=F, calcNull=T)
mod
mod@Fit
fit <- psych::fa(r = data, rotate = "none",
nfactors = 1,
fm = input$method,
scores = "regression",
missing = TRUE,
impute = "median")
fit <- psych::fa(r = data, rotate = "none",
nfactors = 1,
fm = "mle",
scores = "regression",
missing = TRUE,
impute = "median")
fit$scores
fit$loadings
fit$scores
runApp('~/GitHub/clc/R')
mod <- mirt::mirt(data,
model=1,
itemtype="graded",
dentype="Gaussian",
TOL=0.001,
method = "EM",
technical=list(NCYCLES=5000),
verbose=F, calcNull=T)
runApp('~/GitHub/clc/R')
runApp('~/GitHub/clc/R')
runApp('~/GitHub/clc/R')
runApp('~/GitHub/clc/R')
runApp()
runApp('~/GitHub/clc/R')
runApp('~/GitHub/clc/R')
runApp()
runApp('~/GitHub/clc/R')
runApp()
runApp('~/GitHub/clc/R')
runApp()
runApp('~/GitHub/clc/R')
runApp()
runApp()
runApp('~/GitHub/clc/R')
runApp('~/GitHub/clc/R')
vv <- c(Inf, 2,3,4)
vv
range(vv)
var.new <- vv
range.scores <- range(var.new[var.new!=Inf && var.new != -Inf])
var.new[var.new==Inf] <- range.scores[2]
var.new[var.new==-Inf] <- range.scores[1]
var.new
var.new[var.new!=Inf && var.new != -Inf]
var.new[var.new!=Inf & var.new != -Inf]
range.scores <- range(var.new[var.new!=Inf & var.new != -Inf])
var.new[var.new==Inf] <- range.scores[2]
var.new[var.new==-Inf] <- range.scores[1]
var.new
vv <- c(2,3,4)
var.new <- vv
range.scores <- range(var.new[var.new!=Inf & var.new != -Inf])
var.new[var.new==Inf] <- range.scores[2]
var.new[var.new==-Inf] <- range.scores[1]
var.new
var.new[var.new==Inf]
shiny::runApp('R')
library(rsconnect)
deployApp()
setwd("~/GitHub/clc/R")
deployApp()
shiny::runApp('R')
runApp('R')
library(rsconnect)
setwd("~/GitHub/clc/R")
deployApp()
shiny::runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
library(psych)
help(alpha)
setwd("~/GitHub/clc/Sample Dataset")
data <- read.csv(file="test_comma_data.csv")
data <- read.csv(file="test_comma_data.csv")
data <- read.csv(file="test_data_comma.csv")
alpha(x=data)
a<-alpha(x=data)
summaty(a)
summary(a)
shiny::runApp('~/GitHub/clc/R')
a<-alpha(x=data)
a
summary(psych::alpha(x=data))[2]
as.numeric(summary(psych::alpha(x=data)))[2]
as.numeric(as.vector(summary(psych::alpha(x=data))))[2]
summary(psych::alpha(x=data))[2]
a<-summary(psych::alpha(x=data))[2]
as.numeric(as.vector(a))
a
a
summary(psych::alpha(x=data))[2]
summary(psych::alpha(x=data))
a<-summary(psych::alpha(x=data))
a
a
summary(psych::alpha(x=data))
summary(psych::alpha(x=data))[[2]]
summary(psych::alpha(x=data))[2]
a<-psych::alpha(x=data)
a$total
a$total[2]
runApp('~/GitHub/clc/R')
omega(x=data)
help(omega)
runApp('~/GitHub/clc/R')
o<-omega(m=data)
o$alpha
o$omega.tot
o$omega_h
o$alpha
runApp('~/GitHub/clc/R')
runApp('~/GitHub/clc/R')
runApp('~/GitHub/clc/R')
data
gradedIRT_1 <- function(data, method, extraction, maxit=5000, tol=1e-4, n.input = 4) {
mod <- mirt::mirt(data,
model=1,
itemtype="graded",
dentype="Gaussian",
TOL=tol,
method = method,
technical=list(NCYCLES=maxit),
verbose=F, calcNull=T)
Z <- mirt::fscores(mod, method=extraction, rotate="none", verbose=F)
Zok <- Z[,1]*sd(unlist(data), na.rm = TRUE)+mean(unlist(data), na.rm = TRUE)
if (n.input > 3){
stats <- mirt::M2(mod,type="C2")
}else{
stats <- "Statistics cannot be calculated due to too few degrees of freedom."
}
list(loadings=mod@Fit$F,
indices=stats,
scores=Zok)
}
fit <- gradedIRT_1(data, "EM", extraction = "EAP")
fit$indices
gradedIRT_1 <- function(data, method, extraction, maxit=5000, tol=1e-4, n.input = 4) {
mod <- mirt::mirt(data,
model=1,
itemtype="graded",
dentype="Gaussian",
TOL=tol,
method = method,
technical=list(NCYCLES=maxit),
verbose=F, calcNull=T)
Z <- mirt::fscores(mod, method=extraction, rotate="none", verbose=F)
Zok <- Z[,1]*sd(unlist(data), na.rm = TRUE)+mean(unlist(data), na.rm = TRUE)
if (n.input > 3){
stats <- mirt::M2(mod,type="C2")
}else{
stats <- "Statistics cannot be calculated due to too few degrees of freedom."
}
list(loadings=mod@Fit$F,
indices=stats[c(1:4, 7,8,9)],
scores=Zok)
}
fit <- gradedIRT_1(data, "EM", extraction = "EAP")
fit$indices
runApp('~/GitHub/clc/R')
fit <- psych::fa(r=data)
fitIndices <- function(x) {
df <- x$dof
p <- x$PVAL
RMSEA <- x$RMSEA[1]
RMSEA_5 <- x$RMSEA[2]
RMSEA_95 <- x$RMSEA[3]
resmat <- x$residual
SRMSR <- sqrt(mean(resmat[lower.tri(resmat,diag=T)]^2))
TLI <- x$TLI
CFI <- ((x$null.chisq-x$null.dof)-(x$STATISTIC-x$dof))/(x$null.chisq-x$null.dof)
df <- data.frame(df = df, p = p,
RMSEA = RMSEA,
#RMSEA_5 =RMSEA_5,
#RMSEA_95 = RMSEA_95,
SRMSR = SRMSR, TLI = TLI, CFI = CFI)
row.names(df) <- "stats"
return(df)
}
fitIndices(fit)
fit$chi
fit <- gradedIRT_1(data, "EM", extraction = "EAP")
fit$indices
mod <- mirt::mirt(data,
model=1,
itemtype="graded",
dentype="Gaussian",
TOL=tol,
method = method,
technical=list(NCYCLES=maxit),
verbose=F, calcNull=T)
mod <- mirt::mirt(data,
model=1,
itemtype="graded",
dentype="Gaussian",
TOL=tol,
method = "EM",
technical=list(NCYCLES=maxit),
verbose=F, calcNull=T)
mod <- mirt::mirt(data,
model=1,
itemtype="graded",
dentype="Gaussian",
TOL=0.001,
method = "EM",
technical=list(NCYCLES=5000),
verbose=F, calcNull=T)
mod
runApp('~/GitHub/clc/R')
runApp()
runApp()
runApp()
runApp('~/GitHub/clc/R')
runApp('~/GitHub/clc/R')
runApp('~/GitHub/clc/R')
library(rsconnev)
library(rsconnect)
deployApp()
setwd("~/GitHub/clc/R")
deployApp()
shiny::runApp('R')
runApp('R')
sum(3)^2/2
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
library(rsconnect)
setwd("~/GitHub/clc/R")
deployApp()
shiny::runApp('R')
runApp('R')
runApp('R')
runApp('R')
library(rsconnect)
setwd("~/GitHub/clc/R")
deployApp()
